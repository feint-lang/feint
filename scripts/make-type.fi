#!./target/release/feint
"Script to generate a new builtin type definition.

# Args

- name: Str

  The name of the new type. Should be camel case, e.g. 'Int'.

- repr?: Str

  The string representation of the type. E.g., for the builtin `Nil`
  type, this would be `nil`. If the type has a complex or dynamic
  representation, the `fmt::Debug` and `fmt::Display` will need a
  custom implementation.

"

import std.args
import std.system


if args.err || system.err ->
    print_err($"Exiting due to import error:")
    print("args:", args.err)
    print("system:", system.err)
    system.exit(1)


# Exit with message
exit = (...) =>
    if $args.length > 0 ->
        print_err($args.join(" "))
    system.exit(1)


make_rule: Str = (...) =>
    "Make a horizontal rule that."
    count = 72 - 3 - ($args.length)
    count -= $args.map((str: Str) => str.length).sum
    "-".repeat(count)


$main = (...) =>
    p = print
    e = print_err

    args = args.parse("make-type", $args, {
        "help": "Generate a new type",
        "args": {
            "name": {"required": true},
            "repr": {"required": false},
        },
        "flags": ("--help",)
    })

    if args.err ->
        exit()

    name = args.get("name")
    repr = args.get("repr")

    if name.err -> exit(name.err)
    if repr.err -> exit(repr.err)

    singleton_type_name = $"{name.upper()}_TYPE"
    type_name = $"{name}Type"
    obj_name = name
    repr = if repr == nil -> obj_name.lower() else -> repr

    rule = "-".repeat(80)
    e(rule)
    e($"Creating new type:\n")
    e($"singleton type name = {singleton_type_name}")
    e($"type name =  {type_name}")
    e($"object name = {obj_name}")
    e($"display repr = {repr}")
    e("\nAfter creation tasks:\n")
    e($"- Add `pub(crate) mod {name.lower()};` to types/mod.rs")
    e($"- Add constructor to types/new.rs")
    e($"- Add entry to `BUILTINS` in modules/builtins.rs")
    e($"- Add type-related methods in types/base.rs")
    e($"- Add Display and Debug impls in types/base.rs")
    e($"- Customize implementation")
    e($"- Handle in scanner/parser/compiler/VM")
    e(rule, "\n\n")

    template_file = File.new("./scripts/type.template")
    if template_file.err ->
        e(template_file.err)
        exit()

    template = template_file.text
    if template.err ->
        e(template.err)
        exit()

    output = template.render({
        "singleton_type_name": singleton_type_name,
        "type_name": type_name,
        "type_rule": make_rule(type_name, "type"),
        "obj_name": name,
        "obj_rule": make_rule(obj_name, "object"),
        "repr": repr,
    })

    if output.err ->
        e(output.err)
        exit()

    p(output)
