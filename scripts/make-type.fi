#!./target/release/feint
"Script to generate a new builtin type definition.

# Args

- name: Str

  The name of the new type. Should be camel case, e.g. 'Int'.

- repr?: Str

  The string representation of the type. E.g., for the builtin `Nil`
  type, this would be `nil`. If the type has a complex or dynamic
  representation, the `fmt::Debug` and `fmt::Display` will need a
  custom implementation.

"

import std.args
import std.system


if args.err || system.err ->
    print_err($"Exiting due to import error:")
    print("args:", args.err)
    print("system:", system.err)
    system.exit(1)


make_rule: Str = (...) =>
    "Make a horizontal rule that."
    count = 72 - 3 - ($args.length)
    count -= $args.map((str: Str) => str.length).sum
    "-".repeat(count)


EXIT_CODES = {
    "arg_err": 1,
    "template_err": 2,
}


$main = (...) =>
    "Generate a new builtin type

    This takes a type name and optional string representation and prints
    out the type definition, which can be redirected into a file:

        feint make-type Name >src/types/name.rs

    "
    args = args.parse("make-type", $args, $main.$doc, {
        "args": (
            {"name": "name", "required": true},
            {"name": "repr", "required": false},
        ),
    })

    # nil is returned for --help, etc
    if args $$ nil ->
        return 0

    if args.err ->
        return EXIT_CODES.get("arg_err")

    name = args.get("name")
    repr = args.get("repr")

    if name.err ->
        print_err(name.err)
        return EXIT_CODES.get("arg_err")

    if repr.err ->
        print_err(repr.err)
        return EXIT_CODES.get("arg_err")

    singleton_type_name = $"{name.upper()}_TYPE"
    type_name = $"{name}Type"
    obj_name = name
    repr = repr ?? obj_name.lower()

    rule = "-".repeat(80)
    print_err(rule)
    print_err($"Creating new type:\n")
    print_err($"singleton type name = {singleton_type_name}")
    print_err($"type name =  {type_name}")
    print_err($"object name = {obj_name}")
    print_err($"display repr = {repr}")
    print_err("\nAfter creation tasks:\n")
    print_err($"- Add `pub(crate) mod {name.lower()};` to types/mod.rs")
    print_err($"- Add constructor to types/new.rs")
    print_err($"- Add entry to `STD` in modules/std/std.rs")
    print_err($"- Add type-related methods in types/base.rs")
    print_err($"- Add Display and Debug impls in types/base.rs")
    print_err($"- Customize implementation")
    print_err($"- Handle in scanner/parser/compiler/VM (if applicable)")
    print_err(rule, "\n\n")

    template_file = File.new("./scripts/type.template")
    if template_file.err ->
        print_err(template_file.err)
        return EXIT_CODES.get("template_err")

    template = template_file.text
    if template.err ->
        print_err(template.err)
        return EXIT_CODES.get("template_err")

    output = template.render({
        "singleton_type_name": singleton_type_name,
        "type_name": type_name,
        "type_rule": make_rule(type_name, "type"),
        "obj_name": name,
        "obj_rule": make_rule(obj_name, "object"),
        "repr": repr,
    })

    if output.err ->
        print_err(output.err)
        return EXIT_CODES.get("template_err")

    print(output)
