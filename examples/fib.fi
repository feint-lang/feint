import std.args
import std.system

# NOTE: The extra 0 is so that the Nth Fibonacci corresponds to the Nth
#       cache entry.
cache = [0, 0, 1]

fib_if = (n) =>
    if n == 0 ->
        0
    else if n == 1 ->
        1
    else ->
        c = cache.get(n)
        if c $$ nil -> cache.push(fib_if(n - 2) + fib_if(n - 1))
        else -> c

fib_match = (n) =>
    match n ->
        0 -> 0
        1 -> 1
        * ->
            c = cache.get(n)
            match c ->
                nil -> cache.push(fib_match(n - 2) + fib_match(n - 1))
                *   -> c

# Keep for benchmarking
fib_match_slow = (n) =>
    match n ->
        0 -> 0
        1 -> 1
        * -> fib_match_slow(n - 1) + fib_match_slow(n - 2)

$main = (...) =>
    args = args.parse("fib", $args, {
        "args": (
            {"name": "n", "default": 30, "type": Int},
        ),
        "flags": (
            {"name": "slow"},
        )
    })

    if args.err ->
        print_err(args.err)
        system.exit(1)

    n = args.get("n")
    if n $$ nil ->
        print_err($"Expected arg N to be an int")
        system.exit(1)

    result = if args.get("slow") ->
        print("[INFO] Running slow version (without intermediate value caching)")
        fib_match_slow(n)
    else ->
        fib_match(n)

    print(result)
