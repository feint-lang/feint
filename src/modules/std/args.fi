"Args module"

parse: Map = (
    program_name: Str,
    argv: List<Str>,
    spec: Map,
) =>
    "Parse args, such as `argv` from the command line.

    # Args

    - program_name: The executable program name
    - argv: The args that were passed on the command line
    - spec: The arg spec

    # Returns

    A Map containing args or errors.

    "
    # NOTE: This version causes an error because the parenthesized
    #       expression followed by -> looks like a function.
    help = spec.get("help")
    args = spec.get("args")
    flags = spec.get("flags")
    options = spec.get("options")

    positionals = []
    optionals = []

    errors = {}
    result = {}

    each_fn = (name, opts, i) =>
        val = argv.get(i)
        if opts.get("required") && val == nil ->
            errors.add(name, Err.new(ErrType.arg, $"Arg is required"))
        else ->
            result.add(name, val)

    args.each(each_fn)

    if errors.is_empty ->
        result
    else ->
        ess = if errors.length == 1 -> "" else -> "s"
        print_err($"{errors.length} error{ess} encountered while parsing args\n")
        argv.each((arg) => print_err(arg))
        errors.each((name, err) => print_err($"{name}: {err.message}"))
        Err.new(ErrType.arg, "")
