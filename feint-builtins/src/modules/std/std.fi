"std module (builtins)"


print = (...) =>
    "Print representation of zero or more objects to stdout.

    # Args

    - objects?: Any[]

    "
    i = 0
    loop i < $args.length ->
        $print ($args.i, false)
        $print (" ", false)
        i += 1
    $print ("", false, true)


print_err = (...) =>
    "Print representation of zero or more objects to stderr.

    # Args

    - objects?: Any[]

    "
    i = 0
    loop i < $args.length ->
        $print ($args.i, true)
        $print (" ", true)
        i += 1
    $print ("", true, true)


type: Type = (obj: Any) =>
    "Get the type of an object."
    print(obj.$type)


id = (obj: Any) =>
    "Get the ID of an object."
    print(obj.$id)


help = (obj: Any) =>
    "Print the docstring for an object."
    doc = obj.$doc

    result = if doc.err ->
        match doc.err ->
            ErrType.attr_not_found -> $"Object doesn't have a docstring: {obj}"
            * -> $"{doc.err}"
    else ->
        match doc ->
            nil -> $"Object has a nil docstring: {obj}"
            ""  -> $"Object has an empty docstring: {obj}"
            *   -> obj.$doc

    print(result)


assert: Bool | Err = (condition: Bool, ...) =>
    "Check condition and return error if false.

    # Args

    - condition
    - message?: Any
    - halt?: Bool = false

    # Returns

    true: if the assertion succeeded
    Err: if the assertion failed and `halt` is unset

    > NOTE: If `halt` is set, the program will exit immediately with an
    > error code.

    "
    if condition ->
        true
    else ->
        msg = $args.get(0)

        err = match msg ->
            nil -> Err.new(ErrType.assertion, "")
            *   -> Err.new(ErrType.assertion, Str.new(msg))

        if $args.get(1) ->
            print_err(err)
            $halt 1

        err

assert_eq: Bool | Err = (a: Any, b: Any, ...) =>
    "Check if items are equal and return error if not.

    # Args

    - a: Any
    - b: Any
    - halt?: Bool = false

    # Returns

    true: if the items are equal
    Err: if the items are not equal and `halt` is unset

    > NOTE: If `halt` is set, the program will exit immediately with an
    > error code.

    "
    if a == b ->
        true
    else ->
        err = Err.new(ErrType.assertion, $"{a} is not equal to {b}")

        if $args.get(0) ->
            print_err(err)
            $halt 1

        err
