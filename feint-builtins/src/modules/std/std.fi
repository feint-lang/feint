"std module (builtins)"


print = (...) =>
    "Print representation of zero or more objects to stdout.

    The objects will be converted to their string representations,
    joined together with spaces, and printed out with a trailing
    newline.

    # Args

    - objects?: Any[]

    "
    # $print args:
    #
    # - object: Any
    #   A single object to print
    #
    # - stderr: Bool
    #   Print to stderr instead of stdout
    #
    # - nl: Bool
    #   Print a newline (which will cause a flush)
    #
    # - repr: Bool
    #   Print object repr rather than string (use Debug impl)
    #
    # - no_nil: Bool
    #   Don't print object if it's nil (only applicable when printing
    #   to stdout)
    #
    # NOTE: Though the syntax below looks call-like, $print is NOT a
    #       function. It's compiled to a PRINT instruction, and its
    #       operand MUST be a tuple (i.e., a trailing comma MUST be
    #       included when none of the flags are specified).
    i = 0
    loop i < $args.length ->
        $print ($args.i, false)
        $print (" ", false)
        i += 1
    $print ("\n", false)


print_err = (...) =>
    "Print representation of zero or more objects to stderr.

    The objects will be converted to their string representations,
    joined together with spaces, and printed out with a trailing
    newline.

    # Args

    - objects?: Any[]

    "
    i = 0
    loop i < $args.length ->
        $print ($args.i, true)
        $print (" ", true)
        i += 1
    $print ("\n", true)


type: Type = (obj: Any) =>
    "Get the type of an object."
    obj.$type


id = (obj: Any) =>
    "Get the ID of an object."
    print(obj.$id)


help = (obj: Any) =>
    "Print the docstring for an object."
    doc = obj.$doc

    result = if doc.err ->
        match doc.err ->
            ErrType.attr_not_found -> $"Object doesn't have a docstring: {obj}"
            * -> $"{doc.err}"
    else ->
        match doc ->
            nil -> $"Object has a nil docstring: {obj}"
            ""  -> $"Object has an empty docstring: {obj}"
            *   -> obj.$doc

    print(result)


assert: Bool | Err = (condition: Bool, ...) =>
    "Check condition and return error if false.

    # Args

    - condition
    - message?: Any
    - halt?: Bool = false

    # Returns

    true: if the assertion succeeded
    Err: if the assertion failed and `halt` is unset

    > NOTE: If `halt` is set, the program will exit immediately with an
    > error code.

    "
    if condition ->
        true
    else ->
        msg = $args.get(0)

        err = match msg ->
            nil -> Err.new(ErrType.assertion, "")
            *   -> Err.new(ErrType.assertion, Str.new(msg))

        if $args.get(1) ->
            print_err(err)
            $halt 1

        err


assert_eq: Bool | Err = (a: Any, b: Any, ...) =>
    "Check if items are equal and return error if not.

    # Args

    - a: Any
    - b: Any
    - halt?: Bool = false

    # Returns

    true: if the items are equal
    Err: if the items are not equal and `halt` is unset

    > NOTE: If `halt` is set, the program will exit immediately with an
    > error code.

    "
    if a == b ->
        true
    else ->
        err = Err.new(ErrType.assertion, $"{a} is not equal to {b}")

        if $args.get(0) ->
            print_err(err)
            $halt 1

        err


assert_is: Bool | Err = (a: Any, b: Any, ...) =>
    "Check if items are the same object and return error if not.

    # Args

    - a: Any
    - b: Any
    - halt?: Bool = false

    # Returns

    true: if the items are the same object
    Err: if the items are not the same and `halt` is unset

    > NOTE: If `halt` is set, the program will exit immediately with an
    > error code.

    "
    if a $$ b ->
        true
    else ->
        err = Err.new(ErrType.assertion, $"{a} is not {b}")

        if $args.get(0) ->
            print_err(err)
            $halt 1

        err


# NOTE: This is used for manual type-checking of function args, which
#       isn't great.
check_arg_type = (func: Func, name: Str, arg: Any, expected_types: Tuple) =>
    i = 0
    loop i < expected_types.length ->
        if arg.$type $$ expected_types.i ->
            return nil
        i += 1

    err = Err.new(
        ErrType.arg,
        $"{name} of {func} expected type {expected_types.0.$name}; got {arg.$type.$name}",
    )
    $debug err
    err
