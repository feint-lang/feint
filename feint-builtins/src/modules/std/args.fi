"Args module"


parse: Map = (
    program_name: Str,
    argv: List<Str>,
    description: Str,
    spec: Map,
) =>
    "Parse args, such as `argv` from the command line.

    # Args

    - program_name: The executable program name
    - argv: The args that were passed on the command line
    - description: Description of program
    - spec: The arg spec

    # Returns

    A `Map` containing args or errors, unless help is requested, in
    which case the program's usage will be printed and `nil` will be
    returned.

    "
    if argv.iter.err ->
        return argv.iter

    add_help = spec.get("add_help") ?? true

    arg_specs = spec.get("args")
    option_specs = spec.get("options")
    flag_specs = spec.get("flags")

    args = []
    options = {}
    flags = {}

    errors = {}
    result = {}

    # This is used to avoid consuming values for flags.
    flag_names = []
    if flag_specs $! nil ->
        it = flag_specs.iter()
        loop (spec = it.next()) $! nil ->
            flag_names.push(spec.get("name"))

    if add_help ->
        flag_names.push("help")

    # Extract args, options, and flags.
    it = argv.iter()
    loop (arg = it.next()) $! nil ->
        if arg.starts_with("--") ->
            name = arg.remove_prefix("--")
            is_inverse = name.starts_with("no-")

            name = name.replace("-", "_")
            maybe_val = it.peek()

            flag_name = if is_inverse -> name.remove_prefix("no_") else -> name
            flag_val = !is_inverse

            if maybe_val $$ nil || flag_names.has(flag_name) || maybe_val.starts_with("--") ->
                flags.add(flag_name, flag_val)
            else ->
                options.add(name, maybe_val)
        else ->
            args.push(arg)

    # Map args
    if arg_specs $! nil ->
        i = 0
        it = arg_specs.iter()
        loop (spec = it.next()) $! nil ->
            name = spec.get("name")
            if i < args.length ->
                type = spec.get("type") ?? Str
                val = args.get(i)
                val = type.new(val)
                if val.err ->
                    errors.add(name, val)
                else ->
                    result.add(name, val)
            else ->
                default = spec.get("default")
                required = spec.get("required")
                match (default, required) ->
                    (nil, true) ->
                        errors.add(name, Err.new(ErrType.arg, $"Arg is required"))
                    * ->
                        result.add(name, default)
            i += 1

    # Map options
    if option_specs $! nil ->
        it = option_specs.iter()
        loop (spec = it.next()) $! nil ->
            name = spec.get("name")

            val = if options.has(name) ->
                type = spec.get("type") ?? Str
                val = options.get(name)
                type.new(val)
            else ->
                spec.get("default")

            if val.err ->
                errors.add(name, val)
            else ->
                result.add(name, val)

    # Map flags
    if flag_specs $! nil ->
        it = flag_specs.iter()
        loop (spec = it.next()) $! nil ->
            name = spec.get("name")
            default = spec.get("default") ?? false
            val = match flags.get(name) ->
                true -> true
                false -> false
                nil -> default
            result.add(name, val)

    if flags.get("help") ->
        print($"usage: {program_name}\n")
        print(description)

        if arg_specs $! nil ->
            print("\n# Args\n")
            it = arg_specs.iter()
            loop (spec = it.next()) $! nil ->
                print(spec.get("name"))

        if option_specs $! nil ->
            print("\n# Options\n")
            it = option_specs.iter()
            loop (spec = it.next()) $! nil ->
                print(spec.get("name"))

        if flag_specs $! nil ->
            print("\n# Flags\n")
            it = flag_specs.iter()
            loop (spec = it.next()) != nil ->
                print(spec.get("name"))


        nil
    else if errors.is_empty ->
        result
    else ->
        ess = if errors.length == 1 -> "" else -> "s"
        print_err(
            $"{program_name}: {errors.length} error{ess} encountered while parsing args\n"
        )
        errors.each((name, err) => print_err($"{name}: {err.message}"))
        Err.new(ErrType.arg, "")
